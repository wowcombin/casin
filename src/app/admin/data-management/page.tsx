'use client'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'

interface Employee {
  id: number
  nickname: string
  role: string
  isActive: boolean
  workData: WorkData[]
  testResults: TestResult[]
}

interface WorkData {
  id: number
  month: string
  casino: string
  deposit: number
  withdrawal: number
  card: string
  createdAt: string
}

interface TestResult {
  id: number
  month: string
  casino: string
  deposit: number
  withdrawal: number
  card: string
  createdAt: string
}

interface ImportProgress {
  step: string
  current: number
  total: number
  message: string
}

export default function DataManagementPage() {
  const [loading, setLoading] = useState(false)
  const [employees, setEmployees] = useState<Employee[]>([])
  const [selectedMonth, setSelectedMonth] = useState('')
  const [importProgress, setImportProgress] = useState<ImportProgress | null>(null)
  const [activeTab, setActiveTab] = useState('view')
  const [newData, setNewData] = useState({
    employeeNickname: '',
    month: '',
    casino: '',
    deposit: '',
    withdrawal: '',
    card: '',
    type: 'work' // work –∏–ª–∏ test
  })
  const router = useRouter()

  useEffect(() => {
    const isLoggedIn = localStorage.getItem('admin_logged_in')
    if (!isLoggedIn) {
      router.push('/admin/login')
      return
    }

    const currentDate = new Date()
    const currentMonth = currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })
    setSelectedMonth(currentMonth)
    
    loadEmployees()
  }, [router])

  const loadEmployees = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/hr/employees')
      const result = await response.json()
      
      if (result.success) {
        setEmployees(result.data)
      } else {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ' + result.error)
      }
    } catch (error) {
      console.error('Error loading employees:', error)
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setLoading(false)
    }
  }

  const startImport = async () => {
    if (!selectedMonth) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
      return
    }

    setLoading(true)
    setImportProgress({
      step: '–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞',
      current: 0,
      total: 100,
      message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive...'
    })

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setImportProgress({
        step: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        current: 10,
        total: 100,
        message: '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Google Drive...'
      })

      const authResponse = await fetch('/api/hr/import-sheets')
      const authResult = await authResponse.json()

      if (!authResult.success) {
        if (authResult.needsAuth) {
          const confirmAuth = window.confirm('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Drive. –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?')
          if (confirmAuth) {
            window.location.href = '/api/auth/google'
            return
          } else {
            setImportProgress(null)
            setLoading(false)
            return
          }
        }
        throw new Error(authResult.error)
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç
      setImportProgress({
        step: '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
        current: 30,
        total: 100,
        message: `–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ ${selectedMonth}...`
      })

      const importResponse = await fetch('/api/hr/import-sheets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ month: selectedMonth })
      })

      const importResult = await importResponse.json()

      setImportProgress({
        step: '–û–±—Ä–∞–±–æ—Ç–∫–∞',
        current: 80,
        total: 100,
        message: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...'
      })

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      setTimeout(() => {
        setImportProgress({
          step: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
          current: 100,
          total: 100,
          message: importResult.success ? '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!' : '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞'
        })

        setTimeout(() => {
          setImportProgress(null)
          if (importResult.success) {
            alert(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n${importResult.data.message}`)
            loadEmployees() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          } else {
            alert(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:\n\n${importResult.error}`)
          }
        }, 1000)
      }, 1000)

    } catch (error: any) {
      console.error('Import error:', error)
      setImportProgress(null)
      alert(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`)
    } finally {
      setLoading(false)
    }
  }

  const addDataManually = async () => {
    if (!newData.employeeNickname || !newData.month || !newData.casino) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –ú–µ—Å—è—Ü, –ö–∞–∑–∏–Ω–æ')
      return
    }

    try {
      setLoading(true)

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      let employee = employees.find(emp => emp.nickname === newData.employeeNickname)
      
      if (!employee) {
        const createEmployeeResponse = await fetch('/api/hr/employees', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            nickname: newData.employeeNickname,
            role: newData.type === 'test' ? 'TESTER' : 'JUNIOR'
          })
        })
        
        const createEmployeeResult = await createEmployeeResponse.json()
        if (!createEmployeeResult.success) {
          throw new Error(createEmployeeResult.error)
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const endpoint = newData.type === 'work' ? '/api/hr/work-data' : '/api/hr/test-data'
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          employeeNickname: newData.employeeNickname,
          month: newData.month,
          casino: newData.casino,
          deposit: parseFloat(newData.deposit) || 0,
          withdrawal: parseFloat(newData.withdrawal) || 0,
          card: newData.card || 'N/A'
        })
      })

      const result = await response.json()
      
      if (result.success) {
        alert('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        setNewData({
          employeeNickname: '',
          month: '',
          casino: '',
          deposit: '',
          withdrawal: '',
          card: '',
          type: 'work'
        })
        loadEmployees()
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ' + result.error)
      }

    } catch (error: any) {
      console.error('Error adding data:', error)
      alert('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  const generateMonthOptions = () => {
    const months = []
    const currentDate = new Date()
    
    for (let i = 0; i < 12; i++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1)
      const monthStr = date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })
      months.push(monthStr)
    }
    
    return months
  }

  const renderImportTab = () => (
    <div className="space-y-6">
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-lg font-medium text-gray-900 mb-4">–ò–º–ø–æ—Ä—Ç –∏–∑ Google Drive</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ú–µ—Å—è—Ü –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            </label>
            <select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value)}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
              disabled={loading}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü</option>
              {generateMonthOptions().map(month => (
                <option key={month} value={month}>{month}</option>
              ))}
            </select>
          </div>

          {importProgress && (
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-blue-900">{importProgress.step}</span>
                <span className="text-sm text-blue-600">{importProgress.current}%</span>
              </div>
              <div className="w-full bg-blue-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${importProgress.current}%` }}
                ></div>
              </div>
              <p className="text-sm text-blue-700 mt-2">{importProgress.message}</p>
            </div>
          )}

          <button
            onClick={startImport}
            disabled={loading || !selectedMonth}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md font-medium disabled:opacity-50"
          >
            {loading ? '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º...' : 'üì• –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç'}
          </button>
        </div>
      </div>
    </div>
  )

  const renderAddDataTab = () => (
    <div className="space-y-6">
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-lg font-medium text-gray-900 mb-4">–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö *
            </label>
            <select
              value={newData.type}
              onChange={(e) => setNewData({...newData, type: e.target.value})}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="work">–†–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ</option>
              <option value="test">–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Nickname —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *
            </label>
            <input
              type="text"
              value={newData.employeeNickname}
              onChange={(e) => setNewData({...newData, employeeNickname: e.target.value})}
              placeholder="@username"
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ú–µ—Å—è—Ü *
            </label>
            <select
              value={newData.month}
              onChange={(e) => setNewData({...newData, month: e.target.value})}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü</option>
              {generateMonthOptions().map(month => (
                <option key={month} value={month}>{month}</option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ö–∞–∑–∏–Ω–æ *
            </label>
            <input
              type="text"
              value={newData.casino}
              onChange={(e) => setNewData({...newData, casino: e.target.value})}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∑–∏–Ω–æ"
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –î–µ–ø–æ–∑–∏—Ç
            </label>
            <input
              type="number"
              step="0.01"
              value={newData.deposit}
              onChange={(e) => setNewData({...newData, deposit: e.target.value})}
              placeholder="0.00"
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –í—ã–≤–æ–¥
            </label>
            <input
              type="number"
              step="0.01"
              value={newData.withdrawal}
              onChange={(e) => setNewData({...newData, withdrawal: e.target.value})}
              placeholder="0.00"
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            />
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ö–∞—Ä—Ç–∞
            </label>
            <input
              type="text"
              value={newData.card}
              onChange={(e) => setNewData({...newData, card: e.target.value})}
              placeholder="****1234"
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            />
          </div>
        </div>

        <div className="mt-6">
          <button
            onClick={addDataManually}
            disabled={loading}
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md font-medium disabled:opacity-50"
          >
            {loading ? '–î–æ–±–∞–≤–ª—è–µ–º...' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
          </button>
        </div>
      </div>
    </div>
  )

  const renderViewDataTab = () => (
    <div className="space-y-6">
      <div className="bg-white p-6 rounded-lg shadow">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-medium text-gray-900">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
          <button
            onClick={loadEmployees}
            disabled={loading}
            className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium disabled:opacity-50"
          >
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
        </div>

        {employees.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            <p className="text-sm text-gray-400 mt-2">–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é</p>
          </div>
        ) : (
          <div className="space-y-6">
            {employees.map((employee) => (
              <div key={employee.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="text-md font-medium text-gray-900">{employee.nickname}</h4>
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      employee.role === 'TESTER' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'
                    }`}>
                      {employee.role}
                    </span>
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      employee.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {employee.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                  </div>
                </div>

                {employee.workData.length > 0 && (
                  <div className="mb-4">
                    <h5 className="text-sm font-medium text-gray-700 mb-2">–†–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ ({employee.workData.length})</h5>
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-xs">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-2 py-1 text-left">–ú–µ—Å—è—Ü</th>
                            <th className="px-2 py-1 text-left">–ö–∞–∑–∏–Ω–æ</th>
                            <th className="px-2 py-1 text-left">–î–µ–ø–æ–∑–∏—Ç</th>
                            <th className="px-2 py-1 text-left">–í—ã–≤–æ–¥</th>
                            <th className="px-2 py-1 text-left">–ö–∞—Ä—Ç–∞</th>
                          </tr>
                        </thead>
                        <tbody>
                          {employee.workData.slice(0, 3).map((data) => (
                            <tr key={data.id}>
                              <td className="px-2 py-1">{data.month}</td>
                              <td className="px-2 py-1">{data.casino}</td>
                              <td className="px-2 py-1">{data.deposit}</td>
                              <td className="px-2 py-1">{data.withdrawal}</td>
                              <td className="px-2 py-1 font-mono">{data.card}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                      {employee.workData.length > 3 && (
                        <p className="text-xs text-gray-500 mt-1">...–∏ –µ—â–µ {employee.workData.length - 3} –∑–∞–ø–∏—Å–µ–π</p>
                      )}
                    </div>
                  </div>
                )}

                {employee.testResults.length > 0 && (
                  <div>
                    <h5 className="text-sm font-medium text-gray-700 mb-2">–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ({employee.testResults.length})</h5>
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-xs">
                        <thead className="bg-blue-50">
                          <tr>
                            <th className="px-2 py-1 text-left">–ú–µ—Å—è—Ü</th>
                            <th className="px-2 py-1 text-left">–ö–∞–∑–∏–Ω–æ</th>
                            <th className="px-2 py-1 text-left">–î–µ–ø–æ–∑–∏—Ç</th>
                            <th className="px-2 py-1 text-left">–í—ã–≤–æ–¥</th>
                            <th className="px-2 py-1 text-left">–ö–∞—Ä—Ç–∞</th>
                          </tr>
                        </thead>
                        <tbody>
                          {employee.testResults.slice(0, 3).map((data) => (
                            <tr key={data.id}>
                              <td className="px-2 py-1">{data.month}</td>
                              <td className="px-2 py-1">{data.casino}</td>
                              <td className="px-2 py-1">{data.deposit}</td>
                              <td className="px-2 py-1">{data.withdrawal}</td>
                              <td className="px-2 py-1 font-mono">{data.card}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                      {employee.testResults.length > 3 && (
                        <p className="text-xs text-gray-500 mt-1">...–∏ –µ—â–µ {employee.testResults.length - 3} –∑–∞–ø–∏—Å–µ–π</p>
                      )}
                    </div>
                  </div>
                )}

                {employee.workData.length === 0 && employee.testResults.length === 0 && (
                  <p className="text-sm text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )

  if (loading && !importProgress && employees.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <h1 className="text-3xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h1>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push('/admin/accounting')}
                className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium"
              >
                üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è
              </button>
              <button
                onClick={() => router.push('/admin/dashboard')}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium"
              >
                ‚Üê –î–∞—à–±–æ—Ä–¥
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* Tabs */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö', icon: 'üìã' },
              { id: 'import', name: '–ò–º–ø–æ—Ä—Ç –∏–∑ Drive', icon: 'üì•' },
              { id: 'add', name: '–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é', icon: '‚ûï' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab.icon} {tab.name}
              </button>
            ))}
          </nav>
        </div>

        {/* Content */}
        {activeTab === 'view' && renderViewDataTab()}
        {activeTab === 'import' && renderImportTab()}
        {activeTab === 'add' && renderAddDataTab()}
      </div>
    </div>
  )
}
